// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id               String          @id @default(uuid())
//   name             String?
//   age              Int
//   email            String          @unique
//   role             Role            @default(BASIC)
//   writtenPosts     Post[]          @relation("WrittenPosts")
//   favoritePosts    Post[]          @relation("FavoritePosts")
//   userPreference   UserPreference? @relation(fields: [userPreferenceId], references: [id])
//   userPreferenceId String?         @unique

//   @@unique([age, name])
//   @@index([email])
// }

// model UserPreference {
//   id           String  @id @default(uuid())
//   emailUpdates Boolean
//   user         User?
// }

// model Post {
//   id            String     @id @default(uuid())
//   title         String
//   averageRating Float
//   createdAt     DateTime   @default(now())
//   updateAt      DateTime   @updatedAt
//   author        User       @relation("WrittenPosts", fields: [authorId], references: [id])
//   authorId      String
//   favoritedBy   User?      @relation("FavoritePosts", fields: [favoritedById], references: [id])
//   favoritedById String?
//   categories    Category[]
// }

// model Category {
//   id    String @id @default(uuid())
//   name  String @unique
//   posts Post[]
// }

// enum Role {
//   BASIC
//   ADMIN
// }


model User {
  id           String    @id @default(cuid())
  name         String
  email        String    @unique
  age          Int
  status       UserStatus @default(ACTIVE)
  totalOrders  Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relations
  orders       Order[]
  
  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  orderItems  OrderItem[]
  
  @@map("products")
}

model Order {
  id           String       @id @default(cuid())
  totalAmount  Float
  status       OrderStatus  @default(PROCESSING)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  // Relations
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  items        OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id         String   @id @default(cuid())
  quantity   Int
  unitPrice  Float
  createdAt  DateTime @default(now())
  
  // Relations
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([orderId, productId])
  @@map("order_items")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}